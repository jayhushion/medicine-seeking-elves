<template>

  <div class="doc-page">
    <tabs>

      <tab-content class="group-container">
        <div class="group-content" for="{{tabItem in tabItemList}}">

          <div class="introduce">
            <text class="introduce-detail">{{fetchData1}}</text>
           
          </div>

          <div class="item-container" for="{{(index, group) in dataMap[tabItem].groupList}}">
            <div class="item-title">
              <text class="item-title-detail {{selectedIdxMap[tabItem] === index ? 'selected-text': ''}}" onclick="selectConFn(tabItem, index)">{{group.name}}</text>
            </div>
            <div class="item-content {{selectedIdxMap[tabItem] === index ? 'selected-group': ''}}">
              <block for="{{case in group.caseList}}">
                <div class="item-li" onclick="postjson(case.classifyId)">

                  <text class="item-li-detail">{{case.classify}}</text>
                  <image class="item_arrow_img" src="arrow-right.png"></image>
                </div>
              </block>
            </div>
          </div>
        </div>
      </tab-content>

    </tabs>
  </div>

</template>

<script>
import router from '@system.router'
import barcode from '@system.barcode'
import prompt from '@system.prompt'
import $fetch from '@system.fetch'
import { tabData } from './disease'
import fetch from '@system.fetch'

export default {
  /**
   * @desc
   * private内定义的属性不允许被覆盖
   * protected内定义的属性，允许被应用内部页面请求传递的数据覆盖
   * public内定义的属性允许被传入的数据覆盖
   */
  private: {
   dataMap: tabData,
    tabItemList: [],
    selectedIdxMap: {},
    componentName: 'fetch',
    fetchData1: ''
  },
  onInit() {
    // 初始化tabItemList
    this.tabItemList = [].concat(Object.keys(this.dataMap))
    this.tabItemList.forEach(tabItem => {
      this.$set(`selectedIdxMap.${tabItem}`, -1)
    })
  },
  selectConFn(tabItem, index) {
    this.selectedIdxMap[tabItem] = this.selectedIdxMap[tabItem] === index ? -1 : index
  },
  routePath(path, params) {
    router.push({ uri: path, params: params })
  },
  formatterDateTime() {
    var date = new Date()
    var month = date.getMonth() + 1
    var datetime = date.getFullYear()
      + ""// "年"
      + (month >= 10 ? month : "0" + month)
      + ""// "月"
      + (date.getDate() < 10 ? "0" + date.getDate() : date
        .getDate())
      + ""
      + (date.getHours() < 10 ? "0" + date.getHours() : date
        .getHours())
      + ""
      + (date.getMinutes() < 10 ? "0" + date.getMinutes() : date
        .getMinutes())
      + ""
      + (date.getSeconds() < 10 ? "0" + date.getSeconds() : date
        .getSeconds())
    return datetime
  },
  postjson: function (e) {
    var that = this;
    var id=e;
    fetch.fetch({
      url: "https://route.showapi.com/1468-2?classifyId="+e+"&maxResult=15&page=5&showapi_appid=129614&showapi_sign=2a61c09886d346a6943d5f8f81fcf653",
      responseType: 'json',
      method: "POST",
      success: function (ret) {
        that.fetchData1 = "获取数据：" + JSON.stringify(ret.data);
        console.log(that.fetchData1);
      
        that.showVar = true;
        prompt.showToast({
          message: "success"
        })
      },
      fail: function (msg, code) {
        console.log(msg, code);
      },
      complete: function () {
        console.log("complete");
      }
    })
  },



}
</script>

<style>
.doc-page {
  background-color: #ffff00;
  flex: 1;
  flex-direction: column;
 
}
.footer-container {
  height: 120px;
  border-top-width: 1px;
  border-color: #bbbbbb;
  background-color: #ffffff;
}
.group-container {
  flex: 1;
  flex-direction: column;
}
.group-content {
  flex-direction: column;
  flex: 1;
}
.introduce {
  padding-left: 80px;
  padding-right: 80px;
  margin-bottom: 80px;
  margin-top: 60px;
}
.introduce-detail {
  text-align: center;
  flex: 1;
  lines: 300;
  line-height: 50px;
  color: #888888;
}
.item-container {
  margin-left: 30px;
  margin-right: 30px;
  background-color: #ffffff;
  flex-direction: column;
  margin-bottom: 30px;
}
.item-title-detail {
  padding: 40px;
  flex: 1;
  color: #000000;
}
.item-title-detail:active {
  background-color: #dfdfdf;
}
.item-content {
  flex-direction: column;
  padding: 30px;
  display: none;
}
.item-li {
  border-color: #bbbbbb;
  border-bottom-width: 1px;
  align-items: center;
}
.item-li:active {
  background-color: #dfdfdf;
}
.item_arrow_img {
  height: 40px;
  width: 20px;
  margin-right: 30px;
  object-fit: contain;
}
.item-li-detail {
  padding-top: 25px;
  padding-bottom: 25px;
  color: #000000;
  flex: 1;
}
.tab-text {
  text-align: center;
}
.tab-text:active {
  color: #0faeff;
}
.selected-group {
  display: flex;
}
.selected-text {
  color: #cccccc;
}
.img1 {
    width: 100%;
    height: 100%;
    background-size: 100%;
    /* 在水平方向和竖直方向上重复绘制 */
   
    /* 背景图片处于组件中央 */
    background-position: center;
    background-image: url('../Common/background2.png');
    
  }
</style>
